name: Build and publish the container image
run-name: ${{ github.actor }} is preparing the next release

permissions:
  pull-requests: write
  contents: write
  packages: write


"on":
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  release-type-determination:
    name: Determine if tag is pre-released or not
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get tag
        id: get-tag
        run: |
          echo "tag=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

      - name: Check if tag is a pre-release
        id: check-prerelease
        run: |
          TAG="${{ steps.get-tag.outputs.tag }}"
          IS_PRERELEASE="false"
          if [[ "$TAG" == *"-dev"* || "$TAG" == *"-beta"* || "$TAG" == *"-alpha"* ]]; then
            echo "ghcr.io/freva-org/freva-rest-api-dev" > image.txt
            IS_PRERELEASE="true"
          else
            echo "ghcr.io/freva-org/freva-rest-api" > image.txt
          fi
          echo "${{ steps.get-tag.outputs.tag }}" > tag.txt
          echo "$IS_PRERELEASE" > is_prerelease.txt
          echo "is_prerelease=$IS_PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: release-metadata
          path: |
            image.txt
            tag.txt
            is_prerelease.txt
  tests:
    uses: ./.github/workflows/ci_job.yml

  docs:
    runs-on: ubuntu-latest
    needs: [tests, release-type-determination]
    if: needs.release-type-determination.outputs.is_prerelease == 'false'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.X"
      - name: Install freva rest dependencies
        run: |
          python3 -m pip install -e ./freva-rest[dev] ./freva-data-portal-worker
      - name: Generate self signed keys
        run: python dev-env/config/dev-utils.py gen-certs
      - name: Set up services
        run: |
          docker compose -f dev-env/docker-compose.yaml up -d --remove-orphans
      - name: Waiting for keycloak
        run: >
          python dev-env/config/dev-utils.py oidc
          http://localhost:8080/realms/freva/.well-known/openid-configuration
      - name: Starting the local server
        run: |
          python run_server.py --config dev-env/api_config.toml --debug --dev -p 7777
      - name: Creating docs
        run: tox -e docs
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Upload entire repository
          path: './docs/build/html'
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build/html

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [tests, release-type-determination]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download Release Metadata
        uses: actions/download-artifact@v4
        with:
          name: release-metadata

      - name: Read Metadata
        run: |
          IMAGE=$(cat image.txt)
          TAG=$(cat tag.txt)
          IS_PRERELEASE=$(cat is_prerelease.txt)
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
          echo "DEBUG: IMAGE=$IMAGE"
          echo "DEBUG: TAG=$TAG"
          echo "DEBUG: IS_PRERELEASE=$IS_PRERELEASE"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Build and push freva-rest API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          build-args: |
            VERSION=${{ env.TAG }}
            CMD=freva-rest-server
          platforms: linux/amd64, linux/arm64, linux/ppc64le
          push: true
          no-cache: true
          tags: |
            ${{ env.IMAGE }}:${{ env.TAG }}
            ${{ env.IMAGE }}:${{ env.IS_PRERELEASE == 'false' && 'latest' || env.TAG }}

      - name: Build and push freva-data-loader image
        uses: docker/build-push-action@v4
        if: env.IS_PRERELEASE == 'false'
        with:
          context: .
          file: Dockerfile
          build-args: |
            VERSION=${{ env.TAG }}
            CMD=data-loader-worker
          platforms: linux/amd64, linux/arm64, linux/ppc64le
          push: true
          no-cache: true
          tags: |
            ghcr.io/freva-org/freva-data-loader:${{ env.TAG }}
            ghcr.io/freva-org/freva-data-loader:latest


  pypi:
    name: Create Pip package
    needs: [tests, build-and-push-image, docs, release-type-determination]
    if: needs.release-type-determination.outputs.is_prerelease == 'false'
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      -
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      -
        name: Install flit
        run: python -m pip install flit
      -
        name: Building freva-client ðŸ“¦ with flit
        run: flit build
        working-directory: freva-client
      -
        name: publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
          packages-dir: freva-client/dist

  bump-databrowser-version:
    runs-on: ubuntu-latest
    needs: [build-and-push-image, docs, release-type-determination]
    if: needs.release-type-determination.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3.X"

      - name: Pull the latest solr image
        run: docker pull solr:latest

      - name: Get the latest solr version
        id: solr
        run: echo tag=$(docker inspect solr:latest -f '{{index .Config.Labels "org.opencontainers.image.version"}}') >> $GITHUB_OUTPUT

      - name: Get tag
        id: repository
        run: |
          echo "repo=$(echo ${{ github.repository }}|tr 'A-Z' 'a-z')" >> $GITHUB_OUTPUT
          echo "tag=$(python freva-rest/src/freva_rest/__init__.py)" >> $GITHUB_OUTPUT

      - name: Installing dependencies
        run: pip install git-python packaging tomli requests

      - name: Getting realease job
        run: curl -Ls -o bump.py https://raw.githubusercontent.com/freva-org/freva-admin/main/release.py

      - name: Do the release job
        run: python3 bump.py deploy freva_rest -p freva-rest -v -s solr ${{steps.solr.outputs.tag}}
        env:
          GITHUB_TOKEN: ${{secrets.ACCESS_TOKEN}}
          REPO_VERSION: ${{ steps.repository.outputs.tag }}
